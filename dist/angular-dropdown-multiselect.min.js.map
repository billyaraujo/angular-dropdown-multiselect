{"version":3,"sources":["angular-dropdown-multiselect.js","templates.js"],"names":["directiveModule","angular","module","directive","$filter","$document","$compile","$parse","restrict","scope","selectedModel","options","extraSettings","events","searchFilter","translationTexts","groupBy","ngDisabled","templateUrl","link","$scope","$element","$attrs","isModelEmpty","numberOfSelectedItem","getItemDisplayText","optionItem","displayText","settings","displayProp","converterResponse","smartButtonTextConverter","totalSelected","singleSelection","isDefined","idProp","length","getSmartButtonTitle","itemsText","forEach","isChecked","push","smartButtonMaxItems","slice","join","getDefaultButtonTitle","titlePieces","texts","dynamicButtonTextSuffix","buttonDefaultText","getFindObj","id","findObj","find","collection","queryObj","isArray","i","copy","findIndex","getFinalObj","finalObj","objExists","exists","isSelectionLimitExceeded","selectionLimit","closeOnBlur","e","target","parentElement","parentFound","className","indexOf","$dropdownTrigger","$apply","open","toggleDropdown","checkboxClick","$event","toggleItem","stopImmediatePropagation","getGroupTitle","groupValue","groupByTextProvider","getButtonText","title","dynamicTitle","selectAll","deselectAll","sendEvent","value","selectItem","externalEvents","onSelectAll","params","isUndefined","splice","onDeselectAll","item","onItemSelect","deselectItem","onItemDeselect","children","noop","onInitDone","onMaxSelectionReached","useFontAwesome","scrollable","scrollableHeight","enableSearch","showCheckAll","showUncheckAll","closeOnSelect","buttonClasses","closeOnDeselect","checkboxes","undefined","checkAll","uncheckAll","selectionCount","selectionOf","searchPlaceholder","$watch","newValue","orderedItems","extend","style","check","remove","on","$on","off","run","$templateCache","put"],"mappings":"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","file":"angular-dropdown-multiselect.min.js","sourcesContent":["'use strict';\r\n\r\nvar directiveModule = angular.module('angular-dropdown-multiselect', []);\r\n\r\ndirectiveModule.directive('ngDropdownMultiselect', ['$filter', '$document',\r\n    '$compile', '$parse',\r\n    function ($filter, $document, $compile, $parse) {\r\n\r\n  return {\r\n    restrict: 'AE',\r\n    scope: {\r\n      selectedModel: '=',\r\n      options: '=',\r\n      extraSettings: '=',\r\n      events: '=',\r\n      searchFilter: '=?',\r\n      translationTexts: '=',\r\n      groupBy: '@',\r\n      ngDisabled: '='\r\n    },\r\n    templateUrl: 'src/partials/dropdown-multiselect.html',\r\n    link: function ($scope, $element, $attrs) {\r\n\r\n      var isModelEmpty = function() {\r\n        return numberOfSelectedItem() === 0;\r\n      };\r\n\r\n\r\n      var getItemDisplayText = function(optionItem) {\r\n        var displayText = optionItem[$scope.settings.displayProp];\r\n        var converterResponse = $scope.settings.smartButtonTextConverter(displayText, optionItem);\r\n        return converterResponse || displayText;\r\n      };\r\n\r\n\r\n      var numberOfSelectedItem = function() {\r\n        var totalSelected;\r\n        if ($scope.singleSelection) {\r\n          totalSelected = ($scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp])) ? 1 : 0;\r\n        } else {\r\n          totalSelected = angular.isDefined($scope.selectedModel) ? $scope.selectedModel.length : 0;\r\n        }\r\n        return totalSelected;\r\n      };\r\n\r\n\r\n      var getSmartButtonTitle = function() {\r\n        var itemsText = [];\r\n        angular.forEach($scope.options, function (optionItem) {\r\n          if ($scope.isChecked(optionItem[$scope.settings.idProp])) {\r\n            itemsText.push(getItemDisplayText(optionItem));\r\n          }\r\n        });\r\n        if (numberOfSelectedItem() > $scope.settings.smartButtonMaxItems) {\r\n          itemsText = itemsText.slice(0, $scope.settings.smartButtonMaxItems);\r\n          itemsText.push('...');\r\n        }\r\n        return itemsText.join(', ');\r\n      };\r\n\r\n\r\n      var getDefaultButtonTitle = function() {\r\n        var totalSelected = numberOfSelectedItem();\r\n        var titlePieces = [totalSelected, $scope.texts.dynamicButtonTextSuffix];\r\n        if (totalSelected === 0) {\r\n          titlePieces = [$scope.texts.buttonDefaultText];\r\n        }\r\n        return titlePieces.join(' ');\r\n      };\r\n\r\n\r\n      var getFindObj = function(id) {\r\n        var findObj = {};\r\n        findObj[$scope.settings.idProp] = id;\r\n        return findObj;\r\n      };\r\n\r\n\r\n      var find = function(collection, queryObj) {\r\n        if (angular.isArray(collection)) {\r\n          for (var i = 0; i < collection.length; i++) {\r\n            if (collection[i][$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\r\n              return collection[i];\r\n            }\r\n          }\r\n          return null;\r\n        } else {\r\n          if ($scope.selectedModel[$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\r\n            return angular.copy($scope.selectedModel);\r\n          }\r\n        }\r\n      };\r\n\r\n\r\n      var findIndex = function(collection, queryObj) {\r\n        if (angular.isArray(collection)) {\r\n          for (var i = 0; i < collection.length; i++) {\r\n            if (collection[i][$scope.settings.idProp] == queryObj[$scope.settings.idProp]) {\r\n              return i;\r\n            }\r\n          }\r\n        }\r\n        return -1;\r\n      };\r\n\r\n\r\n      var getFinalObj = function(id) {\r\n        var findObj = getFindObj(id);\r\n        var finalObj = find($scope.options, findObj);\r\n        return angular.copy(finalObj);\r\n      };\r\n\r\n\r\n      var objExists = function(id) {\r\n        var findObj = getFindObj(id);\r\n        var exists = false;\r\n        if ($scope.singleSelection) {\r\n          exists = $scope.selectedModel[$scope.settings.idProp] == id;\r\n        } else {\r\n          exists = findIndex($scope.selectedModel, findObj) !== -1;\r\n        }\r\n        return exists;\r\n      };\r\n\r\n\r\n      var isSelectionLimitExceeded = function() {\r\n        return $scope.settings.selectionLimit > 0 &&\r\n          numberOfSelectedItem() >= $scope.settings.selectionLimit;\r\n      };\r\n\r\n\r\n      var closeOnBlur = function(e) {\r\n        var target = e.target.parentElement;\r\n        var parentFound = false;\r\n        while (angular.isDefined(target) && target !== null && !parentFound) {\r\n          if (target.className.indexOf('multiselect-parent') != -1 && !parentFound) {\r\n            if (target === $scope.$dropdownTrigger) {\r\n              parentFound = true;\r\n            }\r\n          }\r\n          target = target.parentElement;\r\n        }\r\n        if (!parentFound) {\r\n          $scope.$apply(function () {\r\n            $scope.open = false;\r\n          });\r\n        }\r\n      };\r\n\r\n\r\n      $scope.toggleDropdown = function () {\r\n        $scope.open = !$scope.open;\r\n      };\r\n\r\n\r\n      $scope.checkboxClick = function ($event, id) {\r\n        $scope.toggleItem(id);\r\n        $event.stopImmediatePropagation();\r\n      };\r\n\r\n\r\n      $scope.getGroupTitle = function (groupValue) {\r\n        if ($scope.settings.groupByTextProvider !== null) {\r\n          return $scope.settings.groupByTextProvider(groupValue);\r\n        }\r\n        return groupValue;\r\n      };\r\n\r\n\r\n      $scope.getButtonText = function () {\r\n        var title = '';\r\n        if ($scope.settings.dynamicTitle && !isModelEmpty()) {\r\n          if ($scope.settings.smartButtonMaxItems > 0) {\r\n            title = getSmartButtonTitle();\r\n          } else {\r\n            title = getDefaultButtonTitle();\r\n          }\r\n        } else {\r\n          title = $scope.texts.buttonDefaultText;\r\n        }\r\n        return title;\r\n      };\r\n\r\n\r\n      $scope.selectAll = function () {\r\n        $scope.deselectAll({sendEvent: false});\r\n\r\n        angular.forEach($scope.options, function (value) {\r\n          $scope.selectItem(value[$scope.settings.idProp], {sendEvent: false});\r\n        });\r\n\r\n        $scope.externalEvents.onSelectAll();\r\n      };\r\n\r\n\r\n      $scope.deselectAll = function (params) {\r\n        params = params || {};\r\n        if (angular.isUndefined(params.sendEvent)) {\r\n          params.sendEvent = true;\r\n        }\r\n\r\n        if ($scope.singleSelection) {\r\n          $scope.selectedModel = {};\r\n        } else {\r\n          $scope.selectedModel.splice(0, numberOfSelectedItem());\r\n        }\r\n\r\n        if (params.sendEvent) {\r\n          $scope.externalEvents.onDeselectAll();\r\n        }\r\n      };\r\n\r\n\r\n      $scope.selectItem = function(id, params) {\r\n        var params = params || {};\r\n        if (angular.isUndefined(params.sendEvent)) {\r\n          params.sendEvent = true;\r\n        }\r\n        var finalObj = getFinalObj(id);\r\n        var sendEvent = function(item) {\r\n          if (params.sendEvent) {\r\n            $scope.externalEvents.onItemSelect(item);\r\n          }\r\n        };\r\n        if ($scope.singleSelection) {\r\n          $scope.selectedModel = finalObj;\r\n          sendEvent(finalObj);\r\n        } else if (!objExists(id) && !isSelectionLimitExceeded()) {\r\n          $scope.selectedModel.push(finalObj);\r\n          sendEvent(finalObj);\r\n        }\r\n      };\r\n\r\n\r\n      $scope.deselectItem = function(id) {\r\n        var finalObj = getFinalObj(id);\r\n        if ($scope.singleSelection) {\r\n          $scope.selectedModel = {};\r\n        } else {\r\n          $scope.selectedModel.splice(findIndex($scope.selectedModel, finalObj), 1);\r\n        }\r\n        $scope.externalEvents.onItemDeselect(finalObj);\r\n      };\r\n\r\n\r\n      $scope.toggleItem = function(id) {\r\n        objExists(id) ? $scope.deselectItem(id) : $scope.selectItem(id);\r\n      };\r\n\r\n\r\n      $scope.isChecked = function (id) {\r\n        if ($scope.singleSelection) {\r\n          return $scope.selectedModel !== null &&\r\n            angular.isDefined($scope.selectedModel[$scope.settings.idProp]) &&\r\n            $scope.selectedModel[$scope.settings.idProp] === id;\r\n        }\r\n        return objExists(id);\r\n      };\r\n\r\n\r\n      (function constructor() {\r\n        $scope.$dropdownTrigger = $element.children()[0];\r\n\r\n        $scope.externalEvents = {\r\n          onItemSelect: angular.noop,\r\n          onItemDeselect: angular.noop,\r\n          onSelectAll: angular.noop,\r\n          onDeselectAll: angular.noop,\r\n          onInitDone: angular.noop,\r\n          onMaxSelectionReached: angular.noop\r\n        };\r\n\r\n        $scope.settings = {\r\n          useFontAwesome: false,\r\n          dynamicTitle: true,\r\n          scrollable: false,\r\n          scrollableHeight: '300px',\r\n          closeOnBlur: true,\r\n          displayProp: 'label',\r\n          idProp: 'id',\r\n          enableSearch: false,\r\n          selectionLimit: 0,\r\n          showCheckAll: true,\r\n          showUncheckAll: true,\r\n          closeOnSelect: false,\r\n          buttonClasses: 'btn btn-default',\r\n          closeOnDeselect: false,\r\n          checkboxes: $attrs.checkboxes || undefined,\r\n          groupBy: $attrs.groupBy || undefined,\r\n          groupByTextProvider: null,\r\n          smartButtonMaxItems: 0,\r\n          smartButtonTextConverter: angular.noop\r\n        };\r\n\r\n        $scope.texts = {\r\n          checkAll: 'Check All',\r\n          uncheckAll: 'Uncheck All',\r\n          selectionCount: 'checked',\r\n          selectionOf: '/',\r\n          searchPlaceholder: 'Search...',\r\n          buttonDefaultText: 'Select',\r\n          dynamicButtonTextSuffix: 'checked'\r\n        };\r\n\r\n        $scope.searchFilter = $scope.searchFilter || '';\r\n\r\n        if (angular.isDefined($scope.settings.groupBy)) {\r\n          $scope.$watch('options', function (newValue) {\r\n            if (angular.isDefined(newValue)) {\r\n              $scope.orderedItems = $filter('orderBy')(newValue, $scope.settings.groupBy);\r\n            }\r\n          });\r\n        }\r\n\r\n        angular.extend($scope.settings, $scope.extraSettings || []);\r\n        angular.extend($scope.externalEvents, $scope.events || []);\r\n        angular.extend($scope.texts, $scope.translationTexts);\r\n\r\n        $scope.singleSelection = $scope.settings.selectionLimit === 1;\r\n\r\n        $scope.style = {};\r\n        $scope.style.check = $scope.settings.useFontAwesome ? 'fa fa-check' : 'glyphicon glyphicon-ok';\r\n        $scope.style.remove = $scope.settings.useFontAwesome ? 'fa fa-cross' : 'glyphicon glyphicon-remove';\r\n\r\n        if ($scope.singleSelection) {\r\n          if (angular.isArray($scope.selectedModel) && $scope.selectedModel.length === 0) {\r\n            $scope.selectedModel = {};\r\n          }\r\n        }\r\n\r\n        if ($scope.settings.closeOnBlur) {\r\n          $document.on('click', closeOnBlur);\r\n          $scope.$on('$destroy', function() {\r\n            $document.off('click', closeOnBlur)\r\n          });\r\n        }\r\n\r\n        $scope.externalEvents.onInitDone();\r\n      })();\r\n\r\n    }\r\n  };\r\n}]);\r\n",null],"sourceRoot":"/source/"}