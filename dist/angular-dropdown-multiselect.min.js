"use strict";var directiveModule=angular.module("angular-dropdown-multiselect",[]);directiveModule.directive("ngDropdownMultiselect",["$filter","$document","$compile","$parse",function(e,n,t,s){return{restrict:"AE",scope:{ngModel:"=",options:"=",extraSettings:"=",events:"=",searchFilter:"=?",translationTexts:"=",groupBy:"@",ngDisabled:"="},templateUrl:"src/partials/dropdown-multiselect.html",link:function(t,s,i){var o=function(){return 0===r()},l=function(e){var n=e[t.settings.displayProp],s=t.settings.smartButtonTextConverter(n,e);return s||n},r=function(){var e;return e=t.singleSelection?null!==t.ngModel&&angular.isDefined(t.ngModel[t.settings.idProp])?1:0:angular.isDefined(t.ngModel)?t.ngModel.length:0},c=function(){var e=[];return angular.forEach(t.options,function(n){t.isChecked(n[t.settings.idProp])&&e.push(l(n))}),r()>t.settings.smartButtonMaxItems&&(e=e.slice(0,t.settings.smartButtonMaxItems),e.push("...")),e.join(", ")},a=function(){var e=r(),n=[e,t.texts.dynamicButtonTextSuffix];return 0===e&&(n=[t.texts.buttonDefaultText]),n.join(" ")},g=function(e){var n={};return n[t.settings.idProp]=e,n},d=function(e,n){if(angular.isArray(e)){for(var s=0;s<e.length;s++)if(e[s][t.settings.idProp]==n[t.settings.idProp])return e[s];return null}return t.ngModel[t.settings.idProp]==n[t.settings.idProp]?angular.copy(t.ngModel):void 0},u=function(e,n){if(angular.isArray(e))for(var s=0;s<e.length;s++)if(e[s][t.settings.idProp]==n[t.settings.idProp])return s;return-1},p=function(e){var n=g(e),s=d(t.options,n);return angular.copy(s)},h=function(e){var n=g(e),s=!1;return s=t.singleSelection?t.ngModel[t.settings.idProp]==e:-1!==u(t.ngModel,n)},f=function(){return t.settings.selectionLimit>0&&r()>=t.settings.selectionLimit},m=function(e){for(var n=e.target.parentElement,s=!1;angular.isDefined(n)&&null!==n&&!s;)-1==n.className.indexOf("multiselect-parent")||s||n===t.$dropdownTrigger&&(s=!0),n=n.parentElement;s||t.$apply(function(){t.open=!1})};t.toggleDropdown=function(){t.open=!t.open},t.checkboxClick=function(e,n){t.toggleItem(n),e.stopImmediatePropagation()},t.getGroupTitle=function(e){return null!==t.settings.groupByTextProvider?t.settings.groupByTextProvider(e):e},t.getButtonText=function(){var e="";return e=t.settings.dynamicTitle&&!o()?t.settings.smartButtonMaxItems>0?c():a():t.texts.buttonDefaultText},t.selectAll=function(){t.deselectAll({sendEvent:!1}),angular.forEach(t.options,function(e){t.selectItem(e[t.settings.idProp],{sendEvent:!1})}),t.externalEvents.onSelectAll()},t.deselectAll=function(e){e=e||{},angular.isUndefined(e.sendEvent)&&(e.sendEvent=!0),t.singleSelection?t.ngModel={}:t.ngModel.splice(0,r()),e.sendEvent&&t.externalEvents.onDeselectAll()},t.selectItem=function(e,n){var n=n||{};angular.isUndefined(n.sendEvent)&&(n.sendEvent=!0);var s=p(e),i=function(e){n.sendEvent&&t.externalEvents.onItemSelect(e)};t.singleSelection?(t.ngModel=s,i(s)):h(e)||f()||(t.ngModel.push(s),i(s))},t.deselectItem=function(e){var n=p(e);t.singleSelection?t.ngModel={}:t.ngModel.splice(u(t.ngModel,n),1),t.externalEvents.onItemDeselect(n)},t.toggleItem=function(e){h(e)?t.deselectItem(e):t.selectItem(e)},t.isChecked=function(e){return t.singleSelection?null!==t.ngModel&&angular.isDefined(t.ngModel[t.settings.idProp])&&t.ngModel[t.settings.idProp]===e:h(e)},function(){t.$dropdownTrigger=s.children()[0],t.externalEvents={onItemSelect:angular.noop,onItemDeselect:angular.noop,onSelectAll:angular.noop,onDeselectAll:angular.noop,onInitDone:angular.noop,onMaxSelectionReached:angular.noop},t.settings={useFontAwesome:!1,dynamicTitle:!0,scrollable:!1,scrollableHeight:"300px",closeOnBlur:!0,displayProp:"label",idProp:"id",enableSearch:!1,selectionLimit:0,showCheckAll:!0,showUncheckAll:!0,closeOnSelect:!1,buttonClasses:"btn btn-default",closeOnDeselect:!1,checkboxes:i.checkboxes||void 0,groupBy:i.groupBy||void 0,groupByTextProvider:null,smartButtonMaxItems:0,smartButtonTextConverter:angular.noop},t.texts={checkAll:"Check All",uncheckAll:"Uncheck All",selectionCount:"checked",selectionOf:"/",searchPlaceholder:"Search...",buttonDefaultText:"Select",dynamicButtonTextSuffix:"checked"},t.searchFilter=t.searchFilter||"",angular.isDefined(t.settings.groupBy)&&t.$watch("options",function(n){angular.isDefined(n)&&(t.orderedItems=e("orderBy")(n,t.settings.groupBy))}),angular.extend(t.settings,t.extraSettings||[]),angular.extend(t.externalEvents,t.events||[]),angular.extend(t.texts,t.translationTexts),t.singleSelection=1===t.settings.selectionLimit,t.style={},t.style.check=t.settings.useFontAwesome?"fa fa-check":"glyphicon glyphicon-ok",t.style.remove=t.settings.useFontAwesome?"fa fa-cross":"glyphicon glyphicon-remove",t.singleSelection&&angular.isArray(t.ngModel)&&0===t.ngModel.length&&(t.ngModel={}),t.settings.closeOnBlur&&(n.on("click",m),t.$on("$destroy",function(){n.off("click",m)})),t.externalEvents.onInitDone()}()}}}]),angular.module("angular-dropdown-multiselect").run(["$templateCache",function(e){e.put("src/partials/dropdown-multiselect.html",'<div class="multiselect-parent btn-group dropdown-multiselect">\r\n\r\n  <button type="button" class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()" ng-disabled="ngDisabled">{{getButtonText()}}&nbsp;<span class="caret"></span></button>\r\n\r\n  <ul class="dropdown-menu dropdown-menu-form" ng-style="{display: open ? \'block\' : \'none\', height: settings.scrollable ? settings.scrollableHeight : \'auto\' }" style="overflow: scroll">\r\n    <li ng-show="settings.showCheckAll && settings.selectionLimit == 0">\r\n      <a ng-click="selectAll()"><span ng-class="style.check"></span> {{texts.checkAll}}</a>\r\n    </li>\r\n    <li ng-show="settings.showUncheckAll">\r\n      <a ng-click="deselectAll();"><span ng-class="style.remove"></span> {{texts.uncheckAll}}</a>\r\n    </li>\r\n\r\n    <li ng-show="(settings.showCheckAll && settings.selectionLimit == 0) || settings.showUncheckAll" class="divider"></li>\r\n\r\n    <li ng-show="settings.enableSearch">\r\n      <div class="form-group input-group dropdown-header">\r\n        <input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" />\r\n      </div>\r\n    </li>\r\n\r\n    <li ng-show="settings.enableSearch" class="divider"></li>\r\n\r\n    <li ng-if="settings.groupBy" ng-repeat-start="option in orderedItems | filter: searchFilter" ng-show="option[settings.groupBy] !== orderedItems[$index - 1][settings.groupBy]" role="presentation" class="dropdown-header">\r\n      {{getGroupTitle(option[settings.groupBy])}}\r\n    </li>\r\n\r\n    <li ng-if="settings.groupBy" role="presentation" ng-repeat-end>\r\n      <a role="menuitem" tabindex="-1" ng-click="toggleItem(option[settings.idProp])">\r\n        <div ng-if="settings.checkboxes" class="checkbox">\r\n          <label>\r\n            <input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, option[settings.idProp])" ng-checked="isChecked(option[settings.idProp])" />\r\n            {{option[settings.displayProp]}}\r\n          </label>\r\n        </div>\r\n        <div ng-if="!settings.checkboxes">\r\n          <span ng-class="isChecked(option[settings.idProp]) ? style.check : \'\'"></span> {{option[settings.displayProp]}}\r\n        </div>\r\n      </a>\r\n    </li>\r\n\r\n    <li ng-if="!settings.groupBy" role="presentation" ng-repeat="option in options | filter: searchFilter">\r\n      <a role="menuitem" tabindex="-1" ng-click="toggleItem(option[settings.idProp])">\r\n        <div ng-if="settings.checkboxes" class="checkbox">\r\n          <label>\r\n            <input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, option[settings.idProp])" ng-checked="isChecked(option[settings.idProp])" />\r\n            {{option[settings.displayProp]}}\r\n          </label>\r\n        </div>\r\n        <div ng-if="!settings.checkboxes">\r\n          <span ng-class="isChecked(option[settings.idProp]) ? style.check : \'\'"></span> {{option[settings.displayProp]}}\r\n        </div>\r\n      </a>\r\n    </li>\r\n\r\n    <li class="divider" ng-show="settings.selectionLimit > 1"></li>\r\n\r\n    <li role="presentation" ng-show="settings.selectionLimit > 1">\r\n      <a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n')}]);
//# sourceMappingURL=angular-dropdown-multiselect.min.js.map
